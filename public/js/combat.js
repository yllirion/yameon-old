// public/js/combat.js

/**
 * –ú–æ–¥—É–ª—å –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * - –†–∞—Å—á–µ—Ç –∑–æ–Ω —Å—Ç—Ä–µ–ª—å–±—ã
 * - –í—ã–±–æ—Ä —Ü–µ–ª–µ–π –∏ –æ—Ä—É–∂–∏—è
 * - –û–±—Ä–∞–±–æ—Ç–∫—É –≤—ã—Å—Ç—Ä–µ–ª–æ–≤
 * - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
 */

// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫—É–±–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
const CUBE_DIRECTIONS = [
    { q: -1, r: 0, s: 1 },   // 0: West
    { q: 0, r: -1, s: 1 },   // 1: Northwest
    { q: 1, r: -1, s: 0 },   // 2: Northeast
    { q: 1, r: 0, s: -1 },   // 3: East
    { q: 0, r: 1, s: -1 },   // 4: Southeast
    { q: -1, r: 1, s: 0 }    // 5: Southwest
];

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
let combatState = {
    mode: 'normal',  // 'normal', 'targeting', 'firing'
    selectedShip: null,
    targetingWeapon: null,
    availableTargets: [],
    weaponArcs: new Map() // –ö–µ—à –∑–æ–Ω —Å—Ç—Ä–µ–ª—å–±—ã –¥–ª—è –æ—Ä—É–∂–∏—è
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–µ–≤–æ–≥–æ –º–æ–¥—É–ª—è
 */
export function initCombatSystem(socket, playerId) {
    console.log('Combat system initialized');

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    setupCombatEventHandlers(socket);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –±–æ–µ–≤—ã—Ö –æ–≤–µ—Ä–ª–µ–µ–≤
    addCombatStyles();
}

/**
 * –†–∞—Å—á–µ—Ç –±–æ–µ–≤–æ–π –¥—É–≥–∏ –¥–ª—è –æ—Ä—É–∂–∏—è
 * @param {Object} ship - –ö–æ—Ä–∞–±–ª—å
 * @param {Object} weapon - –û—Ä—É–∂–∏–µ
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –≥–µ–∫—Å–æ–≤ –≤ –∑–æ–Ω–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
 */
export function calculateWeaponArc(ship, weapon) {
    const cells = [];
    const { position, dir } = ship;
    const { range, arc } = weapon;

    // –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è
    const mainDir = CUBE_DIRECTIONS[dir];
    const leftDir = CUBE_DIRECTIONS[(dir + 5) % 6];
    const rightDir = CUBE_DIRECTIONS[(dir + 1) % 6];

    // –†–∞—Å—á–µ—Ç –¥—É–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (arc) {
        case 'narrow':
            // –£–∑–∫–∞—è –¥—É–≥–∞ - —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ
            for (let dist = 1; dist <= range; dist++) {
                cells.push({
                    q: position.q + mainDir.q * dist,
                    r: position.r + mainDir.r * dist,
                    s: position.s + mainDir.s * dist
                });
            }
            break;

        case 'standard':
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥—É–≥–∞ - –∫–æ–Ω—É—Å –≤–ø–µ—Ä–µ–¥
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ hex-game.js –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—É—Å–∞
            for (let t = 1; t <= range; t++) {
                // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ t
                const center = {
                    q: position.q + mainDir.q * t,
                    r: position.r + mainDir.r * t,
                    s: position.s + mainDir.s * t
                };
                cells.push(center);

                // –ë–æ–∫–æ–≤—ã–µ —Ç–æ—á–∫–∏ - —á–µ–º –¥–∞–ª—å—à–µ –æ—Ç –∫–æ—Ä–∞–±–ª—è, —Ç–µ–º —É–∂–µ –∫–æ–Ω—É—Å
                for (let i = 1; i <= range - t; i++) {
                    // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∫–æ–Ω—É—Å–∞
                    cells.push({
                        q: center.q + leftDir.q * i,
                        r: center.r + leftDir.r * i,
                        s: center.s + leftDir.s * i
                    });
                    // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∫–æ–Ω—É—Å–∞
                    cells.push({
                        q: center.q + rightDir.q * i,
                        r: center.r + rightDir.r * i,
                        s: center.s + rightDir.s * i
                    });
                }
            }
            break;

        case 'wide':
            // –®–∏—Ä–æ–∫–∞—è –¥—É–≥–∞ - –≤–∫–ª—é—á–∞–µ—Ç –±–æ–∫–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            // –ü—Ä—è–º–æ
            for (let dist = 1; dist <= range; dist++) {
                cells.push({
                    q: position.q + mainDir.q * dist,
                    r: position.r + mainDir.r * dist,
                    s: position.s + mainDir.s * dist
                });
            }
            // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
            for (let dist = 1; dist <= Math.max(1, range - 1); dist++) {
                cells.push({
                    q: position.q + leftDir.q * dist,
                    r: position.r + leftDir.r * dist,
                    s: position.s + leftDir.s * dist
                });
            }
            // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
            for (let dist = 1; dist <= Math.max(1, range - 1); dist++) {
                cells.push({
                    q: position.q + rightDir.q * dist,
                    r: position.r + rightDir.r * dist,
                    s: position.s + rightDir.s * dist
                });
            }
            break;

        case 'broadside':
            // –ë–æ—Ä—Ç–æ–≤–æ–π –∑–∞–ª–ø - —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—ã
            for (let dist = 1; dist <= range; dist++) {
                cells.push({
                    q: position.q + leftDir.q * dist,
                    r: position.r + leftDir.r * dist,
                    s: position.s + leftDir.s * dist
                });
                cells.push({
                    q: position.q + rightDir.q * dist,
                    r: position.r + rightDir.r * dist,
                    s: position.s + rightDir.s * dist
                });
            }
            break;

        case '—Ç–µ—Å—Ç–∏—Ä—É–µ–º':
            break;
    }

    return cells;
}

/**
 * –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–π –≤ –∑–æ–Ω–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –æ—Ä—É–∂–∏—è
 * @param {Object} ship - –°—Ç—Ä–µ–ª—è—é—â–∏–π –∫–æ—Ä–∞–±–ª—å
 * @param {Object} weapon - –û—Ä—É–∂–∏–µ
 * @param {Array} allShips - –í—Å–µ –∫–æ—Ä–∞–±–ª–∏ –Ω–∞ –ø–æ–ª–µ
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π
 */
export function findTargetsInArc(ship, weapon, allShips) {
    const weaponCells = calculateWeaponArc(ship, weapon);
    const targets = [];

    allShips.forEach(target => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–π –∫–æ—Ä–∞–±–ª—å –∏ —Å–æ—é–∑–Ω–∏–∫–æ–≤
        if (target.id === ship.id || target.owner === ship.owner) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ü–µ–ª—å –≤ –∑–æ–Ω–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        const isInArc = weaponCells.some(cell =>
            cell.q === target.position.q &&
            cell.r === target.position.r &&
            cell.s === target.position.s
        );

        if (isInArc) {
            targets.push(target);
        }
    });

    return targets;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∑–æ–Ω—É —Å—Ç—Ä–µ–ª—å–±—ã –Ω–∞ –∫–∞—Ä—Ç–µ
 * @param {Object} ship - –ö–æ—Ä–∞–±–ª—å
 * @param {Object} weapon - –û—Ä—É–∂–∏–µ
 */
export function highlightWeaponArc(ship, weapon) {
    clearCombatHighlights();

    const cells = calculateWeaponArc(ship, weapon);

    cells.forEach(cell => {
        const poly = document.querySelector(
            `#hexmap polygon[data-q="${cell.q}"][data-r="${cell.r}"][data-s="${cell.s}"]`
        );
        if (poly) {
            poly.classList.add('weapon-arc-highlight');
            poly.setAttribute('fill', 'rgba(239, 68, 68, 0.3)'); // –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π —Ü–≤–µ—Ç
        }
    });
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –±–æ–µ–≤—ã–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
 */
export function clearCombatHighlights() {
    document.querySelectorAll('.weapon-arc-highlight').forEach(poly => {
        poly.classList.remove('weapon-arc-highlight');
        poly.setAttribute('fill', '#dde');
    });
}

/**
 * –°–æ–∑–¥–∞—Ç—å –æ–≤–µ—Ä–ª–µ–π –≤—ã–±–æ—Ä–∞ –æ—Ä—É–∂–∏—è –¥–ª—è —Ü–µ–ª–∏
 * @param {Object} target - –ö–æ—Ä–∞–±–ª—å-—Ü–µ–ª—å
 * @param {Array} weapons - –î–æ—Å—Ç—É–ø–Ω–æ–µ –æ—Ä—É–∂–∏–µ
 * @param {Object} attackerPosition - –ü–æ–∑–∏—Ü–∏—è –∞—Ç–∞–∫—É—é—â–µ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
 */
export function createWeaponSelectionOverlay(target, weapons, attackerPosition) {
    const svg = document.getElementById('hexmap');
    const rect = svg.getBoundingClientRect();

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Ü–µ–ª–∏ –≤ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const targetElement = document.querySelector(`.ship-icon[data-ship-id="${target.id}"]`);
    if (!targetElement) return;

    const targetRect = targetElement.getBoundingClientRect();

    // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
    const overlay = document.createElement('div');
    overlay.className = 'combat-overlay weapon-selection';
    overlay.style.left = `${targetRect.right + 10}px`;
    overlay.style.top = `${targetRect.top}px`;

    overlay.innerHTML = `
        <div class="overlay-header">
            <h4>üéØ ${target.shipClass}</h4>
            <span class="close-btn">&times;</span>
        </div>
        <div class="overlay-content">
            <div class="target-info">
                <span>HP: ${target.hp}/${target.maxHP || 5}</span>
                <span>–ë—Ä–æ–Ω—è: ${target.armor || 5}</span>
            </div>
            <div class="weapons-list">
                ${weapons.map(weapon => `
                    <label class="weapon-option">
                        <input type="checkbox" data-weapon-id="${weapon.id}" data-target-id="${target.id}">
                        <span class="weapon-name">${weapon.name}</span>
                        <span class="weapon-stats">–£—Ä–æ–Ω: ${weapon.damage}, –î–∞–ª—å–Ω–æ—Å—Ç—å: ${weapon.range}</span>
                    </label>
                `).join('')}
            </div>
            <button class="fire-button" data-target-id="${target.id}">
                üî• –û–¢–ö–†–´–¢–¨ –û–ì–û–ù–¨
            </button>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–≤–µ—Ä–ª–µ–µ–≤
    let container = document.getElementById('combatOverlayContainer');
    if (!container) {
        container = document.createElement('div');
        container.id = 'combatOverlayContainer';
        document.body.appendChild(container);
    }

    container.appendChild(overlay);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    overlay.querySelector('.close-btn').onclick = () => {
        overlay.remove();
        clearCombatHighlights();
    };

    overlay.querySelector('.fire-button').onclick = () => {
        handleFireCommand(target.id);
        overlay.remove();
    };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç—Ä–µ–ª—å–±—ã
 * @param {string} targetId - ID —Ü–µ–ª–∏
 */
function handleFireCommand(targetId) {
    const selectedWeapons = [];

    // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ
    document.querySelectorAll(`input[data-target-id="${targetId}"]:checked`).forEach(checkbox => {
        selectedWeapons.push(checkbox.dataset.weaponId);
    });

    if (selectedWeapons.length === 0) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ—Ä—É–∂–∏–µ!');
        return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ socket
    console.log('Fire command:', { targetId, weapons: selectedWeapons });

    clearCombatHighlights();
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupCombatEventHandlers(socket) {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–µ–ª—å–±—ã
    socket.on('combatResult', (data) => {
        console.log('Combat result:', data);
        // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–ø–∞–¥–∞–Ω–∏—è/–ø—Ä–æ–º–∞—Ö–∞
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–Ω–∞
    socket.on('damageDealt', (data) => {
        console.log('Damage dealt:', data);
        // TODO: –û–±–Ω–æ–≤–∏—Ç—å HP –∫–æ—Ä–∞–±–ª—è
    });
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
function addCombatStyles() {
    if (document.getElementById('combat-styles')) return;

    const styles = `
        #combatOverlayContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1000;
        }
        
        .combat-overlay {
            position: absolute;
            background: rgba(0, 0, 0, 0.9);
            border: 2px solid #ef4444;
            border-radius: 2px;
            padding: 0;
            pointer-events: auto;
            min-width: 140px;
            box-shadow: 0 4px 20px rgba(239, 68, 68, 0.4);
        }
        
        .overlay-header {
            background: #991b1b;
            padding: 10px 15px;
            border-radius: 6px 6px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .overlay-header h4 {
            margin: 0;
            color: white;
            font-size: 10px;
        }
        
        .close-btn {
            color: white;
            font-size: 16px;
            cursor: pointer;
            line-height: 1;
        }
        
        .close-btn:hover {
            color: #fca5a5;
        }
        
        .overlay-content {
            padding: 8px;
        }
        
        .target-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            color: #fbbf24;
            font-size: 10px;
        }
        
        .weapons-list {
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin-bottom: 15px;
        }
        
        .weapon-option {
            display: flex;
            align-items: center;
            padding: 8px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.2s;
        }
        
        .weapon-option:hover {
            background: rgba(255, 255, 255, 0.1);
        }
        
        .weapon-option input {
            margin-right: 8px;
        }
        
        .weapon-name {
            color: white;
            flex: 1;
        }
        
        .weapon-stats {
            color: #9ca3af;
            font-size: 12px;
        }
        
        .fire-button {
            width: 100%;
            padding: 10px;
            background: #dc2626;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: background 0.2s;
        }
        
        .fire-button:hover {
            background: #ef4444;
        }
        
        .weapon-arc-highlight {
            animation: pulse-red 1.5s infinite;
        }
        
        @keyframes pulse-red {
            0% { opacity: 0.3; }
            50% { opacity: 0.6; }
            100% { opacity: 0.3; }
        }
    `;

    const styleSheet = document.createElement('style');
    styleSheet.id = 'combat-styles';
    styleSheet.textContent = styles;
    document.head.appendChild(styleSheet);
}

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export function testCombatSystem(ship, allShips) {
    // –ü—Ä–∏–º–µ—Ä –æ—Ä—É–∂–∏—è
    const testWeapon = {
        id: 'main_guns',
        name: '–ì–ª–∞–≤–Ω—ã–µ –æ—Ä—É–¥–∏—è',
        damage: 2,
        range: 3,
        arc: 'standard'
    };

    // –ü–æ–¥—Å–≤–µ—Ç–∏–º –¥—É–≥—É —Å—Ç—Ä–µ–ª—å–±—ã
    highlightWeaponArc(ship, testWeapon);

    // –ù–∞–π–¥–µ–º —Ü–µ–ª–∏
    const targets = findTargetsInArc(ship, testWeapon, allShips);

    if (targets.length > 0) {
        // –ü–æ–∫–∞–∂–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏
        createWeaponSelectionOverlay(targets[0], [testWeapon], null);
    }

    console.log('Found targets:', targets);
}