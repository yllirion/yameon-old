// public/js/battleUI.js

import {
    drawHexGrid,
    renderPlacedShips,
    addRotationControls,
    showRotationControlsForShip,
    showMovementCells,
    clearMovementHighlight,
    isMovementCellAvailable,
    getSelectedShipForMovement,
    cubeAdd,              // –ù–û–í–´–ô –∏–º–ø–æ—Ä—Ç
    cubeDistance,         // –ù–û–í–´–ô –∏–º–ø–æ—Ä—Ç
    CUBE_DIRECTIONS      // –ù–û–í–´–ô –∏–º–ø–æ—Ä—Ç
} from './hexmap.js';

import { initCombatSystem, testCombatSystem, setCombatRoomId } from './combat.js';
import { setCombatDependencies } from './combat.js';

/** –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å—É ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –ª–æ–≥–æ–≤ */
const classStats = {
    '–§—Ä–µ–≥–∞—Ç':   { speed: 5, maneuverability: 1, armor: 5, activation: 2 },
    '–≠—Å–º–∏–Ω–µ—Ü':  { speed: 4, maneuverability: 1, armor: 6, activation: 3 },
    '–ö—Ä–µ–π—Å–µ—Ä':  { speed: 3, maneuverability: 1, armor: 7, activation: 4 },
    '–õ–∏–Ω–∫–æ—Ä':   { speed: 2, maneuverability: 1, armor: 8, activation: 5 },
    '–î—Ä–µ–¥–Ω–æ—É—Ç': { speed: 1, maneuverability: 1, armor: 9, activation: 6 }
};

let selectedShipToPlace = null;
let initialPlacement    = null;
let lastShips           = [];
let currentBattleRoomId = null;
let lastBattleState = null;
let currentPlayerId = null;
let globalSocket = null;

// –ö—ç—à –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–æ—Ä–∞–±–ª–µ–π
let shipProjectsCache = {};

let previewState = {
    isPreviewMode: false,
    shipId: null,
    originalPosition: null,
    originalDirection: null,
    originalSpeed: null,
    originalManeuverability: null,
    originalFreeTurn: null,
    movements: [] // –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
};

/** –ü–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å–Ω–∏–∑—É –≤ #battleLog */
function logBattle(msg) {
    const footer = document.getElementById('battleLog');
    if (!footer) return;
    const div = document.createElement('div');
    div.textContent = msg;
    footer.appendChild(div);
    footer.scrollTop = footer.scrollHeight;
}

function getDirectionToTarget(from, to) {
    const diff = cubeAdd(to, { q: -from.q, r: -from.r, s: -from.s });

    console.log(`Direction from (${from.q},${from.r}) to (${to.q},${to.r})`);
    console.log(`Diff vector: (${diff.q}, ${diff.r}, ${diff.s})`);

    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    let bestDir = 0;
    let bestDot = -2;

    for (let i = 0; i < 6; i++) {
        const dir = CUBE_DIRECTIONS[i];
        const dot = diff.q * dir.q + diff.r * dir.r + diff.s * dir.s;

        if (dot > bestDot) {
            bestDot = dot;
            bestDir = i;
        }
    }

    return bestDir;
}



// –õ–æ–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è (–±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞)
function moveShipLocally(ship, targetPosition, allShips) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
    const pathCost = calculateLocalPathCost(ship, targetPosition, allShips);

    if (!pathCost) {
        logBattle('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è');
        return;
    }

    if (ship.currentSpeed < pathCost.speedCost) {
        logBattle('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏');
        return;
    }

    if (ship.currentManeuverability < pathCost.maneuverCost) {
        logBattle('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –º–∞–Ω–µ–≤—Ä–µ–Ω–Ω–æ—Å—Ç–∏');
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    previewState.movements.push({
        from: { ...ship.position },
        to: { ...targetPosition },
        direction: pathCost.finalDirection,
        speedCost: pathCost.speedCost,
        maneuverCost: pathCost.maneuverCost
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ
    ship.position = targetPosition;
    ship.dir = pathCost.finalDirection;
    ship.currentSpeed -= pathCost.speedCost;
    ship.currentManeuverability -= pathCost.maneuverCost;

    // –î–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –µ—Å–ª–∏ –¥–≤–∏–≥–∞–ª–∏—Å—å
    if (pathCost.speedCost > 0) {
        ship.hasFreeTurn = true;
    }

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∞–±–ª—å
    updateShipVisuals(ship);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
    setTimeout(() => {
        showMovementCells(ship, allShips);

        // –í–ê–ñ–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
        if (ship.currentManeuverability > 0 || ship.hasFreeTurn) {
            console.log('Adding rotation controls in preview mode');
            addRotationControls(
                ship,
                true,  // isCurrentPlayer
                false, // isPlacementPhase
                (shipId, direction) => handlePreviewRotation(shipId, direction)
            );
            showRotationControlsForShip(ship.id);
        }
    }, 100);

    logBattle(`–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: –ø–µ—Ä–µ—Ö–æ–¥ –≤ (${targetPosition.q},${targetPosition.r})`);
}

function handlePreviewRotation(shipId, direction) {
    const ship = lastBattleState.ships.find(s => s.id === shipId);
    if (!ship) return;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞
    let maneuverCost = 1;
    if (ship.hasFreeTurn) {
        maneuverCost = 0;
        ship.hasFreeTurn = false;
        logBattle(`–ü–æ–≤–æ—Ä–æ—Ç ${direction === 'left' ? '–Ω–∞–ª–µ–≤–æ' : '–Ω–∞–ø—Ä–∞–≤–æ'} (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)`);
    } else if (ship.currentManeuverability > 0) {
        ship.currentManeuverability -= 1;
        logBattle(`–ü–æ–≤–æ—Ä–æ—Ç ${direction === 'left' ? '–Ω–∞–ª–µ–≤–æ' : '–Ω–∞–ø—Ä–∞–≤–æ'} (‚àí1 –º–∞–Ω—ë–≤—Ä–µ–Ω–Ω–æ—Å—Ç—å)`);
    } else {
        logBattle('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –º–∞–Ω–µ–≤—Ä–µ–Ω–Ω–æ—Å—Ç–∏');
        return;
    }

    // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ—Ä–∞–±–ª—å –ª–æ–∫–∞–ª—å–Ω–æ
    if (direction === 'left') {
        ship.dir = (ship.dir + 5) % 6;
    } else if (direction === 'right') {
        ship.dir = (ship.dir + 1) % 6;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    previewState.movements.push({
        type: 'rotation',
        direction: direction,
        maneuverCost: maneuverCost
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ
    updateShipVisuals(ship);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞
    setTimeout(() => {
        if (ship.currentManeuverability > 0 || ship.hasFreeTurn) {
            addRotationControls(
                ship,
                true,
                false,
                (shipId, direction) => handlePreviewRotation(shipId, direction)
            );
            showRotationControlsForShip(ship.id);
        }
    }, 100);
}

function enterPreviewMode(ship) {
    console.log('Entering preview mode for ship:', ship.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∞–±–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    if (ship.status !== 'ready') {
        console.log('Ship is not ready, cannot enter preview mode');
        return;
    }

    // –ï—Å–ª–∏ —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ä–∞–±–ª—è - —Å–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    if (previewState.isPreviewMode && previewState.shipId !== ship.id) {
        console.log('Already in preview mode for another ship, resetting first');
        resetPreviewMode();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è
    previewState = {
        isPreviewMode: true,
        shipId: ship.id,
        originalPosition: {
            q: ship.position.q,
            r: ship.position.r,
            s: ship.position.s
        },
        originalDirection: ship.dir,
        originalSpeed: ship.currentSpeed,
        originalManeuverability: ship.currentManeuverability,
        originalFreeTurn: ship.hasFreeTurn || false,
        movements: [] // –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    };

    console.log('Preview state saved:', previewState);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    showPreviewIndicator();

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –≤—Å—é –∫–∞—Ä—Ç—É
    const hexmap = document.getElementById('hexmap');
    if (hexmap) {
        hexmap.addEventListener('contextmenu', preventContextMenu, true);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const shipIcon = document.querySelector(`.ship-icon[data-ship-id="${ship.id}"]`);
    if (shipIcon) {
        shipIcon.classList.add('preview-mode');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ—Ä–∞–±–ª—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const container = document.getElementById('playerShipCard');
    if (container && container.dataset.shipId === ship.id) {
        const card = container.querySelector('.ship-hover-card');
        if (card) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∫–∞—Ä—Ç–æ—á–∫—É
            if (!card.querySelector('.preview-mode-indicator')) {
                const indicator = document.createElement('div');
                indicator.className = 'preview-mode-indicator';
                indicator.innerHTML = 'üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞';
                indicator.style.cssText = `
                    background: #FF9800;
                    color: white;
                    padding: 4px 8px;
                    text-align: center;
                    font-size: 0.8em;
                    font-weight: bold;
                    margin-bottom: 4px;
                `;
                card.insertBefore(indicator, card.firstChild);
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—É–±–∏–∫–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    const canActivate = checkIfCanActivateShip(ship);
    if (!canActivate) {
        logBattle(`‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É–±–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ${ship.shipClass}`);
    }

    logBattle(`üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${ship.shipClass} - –Ω–∞–∂–º–∏—Ç–µ ESC –¥–ª—è –æ—Ç–º–µ–Ω—ã`);
}

function checkIfCanActivateShip(ship) {
    if (!lastBattleState || !lastBattleState.dicePools) return false;

    const playerDice = lastBattleState.dicePools[currentPlayerId];
    if (!playerDice || !playerDice.current) return false;

    const activationValue = classStats[ship.shipClass].activation;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É–±–æ–≤
    for (let value = activationValue; value <= 6; value++) {
        if (playerDice.current[value] && playerDice.current[value] > 0) {
            return true;
        }
    }

    return false;
}

function preventContextMenu(e) {
    if (previewState.isPreviewMode) {
        e.preventDefault();
        e.stopPropagation();
        return false;
    }
}


function commitPreviewMode() {
    if (!previewState.isPreviewMode) return;

    const ship = lastBattleState.ships.find(s => s.id === previewState.shipId);
    if (!ship) return;

    console.log('Committing preview mode');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const finalPosition = { ...ship.position };
    const finalDirection = ship.dir;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    let totalSpeedCost = previewState.originalSpeed - ship.currentSpeed;
    let totalManeuverCost = previewState.originalManeuverability - ship.currentManeuverability;

    console.log('Total movement cost:', {
        speed: totalSpeedCost,
        maneuver: totalManeuverCost,
        movements: previewState.movements.length
    });

    // –£–±–∏—Ä–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    const hexmap = document.getElementById('hexmap');
    if (hexmap) {
        hexmap.removeEventListener('contextmenu', preventContextMenu);
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    hidePreviewIndicator();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    previewState.isPreviewMode = false;

    // –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    if (ship.status === 'ready') {
        const roomId = currentBattleRoomId || lastBattleState.id;

        if (!autoActivateShip(ship.id, roomId, globalSocket)) {
            // –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            console.log('Failed to activate ship, rolling back');

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            ship.position = previewState.originalPosition;
            ship.dir = previewState.originalDirection;
            ship.currentSpeed = previewState.originalSpeed;
            ship.currentManeuverability = previewState.originalManeuverability;
            ship.hasFreeTurn = previewState.originalFreeTurn;

            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            updateShipVisuals(ship);
            showMovementCells(ship, lastBattleState.ships);

            logBattle(`–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É–±–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ - –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ`);
            return;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ø–µ–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    setTimeout(() => {
        const roomId = currentBattleRoomId || lastBattleState.id;

        // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        if (finalPosition.q !== previewState.originalPosition.q ||
            finalPosition.r !== previewState.originalPosition.r ||
            finalPosition.s !== previewState.originalPosition.s ||
            finalDirection !== previewState.originalDirection) {

            globalSocket.emit('moveShip', {
                roomId: roomId,
                shipId: ship.id,
                targetPosition: finalPosition
            });

            logBattle(`–ü–æ–∑–∏—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: (${finalPosition.q},${finalPosition.r})`);
        } else {
            logBattle(`–ö–æ—Ä–∞–±–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è`);
        }
    }, 150);

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    previewState = {
        isPreviewMode: false,
        shipId: null,
        originalPosition: null,
        originalDirection: null,
        originalSpeed: null,
        originalManeuverability: null,
        originalFreeTurn: null,
        movements: []
    };
}

function resetPreviewMode() {
    if (!previewState.isPreviewMode) return;

    const ship = lastBattleState.ships.find(s => s.id === previewState.shipId);
    if (!ship) return;

    console.log('Resetting preview mode');

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è
    ship.position = previewState.originalPosition;
    ship.dir = previewState.originalDirection;
    ship.currentSpeed = previewState.originalSpeed;
    ship.currentManeuverability = previewState.originalManeuverability;
    ship.hasFreeTurn = previewState.originalFreeTurn;

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∞–±–ª—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    updateShipVisuals(ship);

    // –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –¥–≤–∏–∂–µ–Ω–∏—è
    clearMovementHighlight();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    setTimeout(() => {
        showMovementCells(ship, lastBattleState.ships);
    }, 100);

    // –£–±–∏—Ä–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    const hexmap = document.getElementById('hexmap');
    if (hexmap) {
        hexmap.removeEventListener('contextmenu', preventContextMenu);
    }

    // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    hidePreviewIndicator();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    previewState = {
        isPreviewMode: false,
        shipId: null,
        originalPosition: null,
        originalDirection: null,
        originalSpeed: null,
        originalManeuverability: null,
        originalFreeTurn: null,
        movements: []
    };

    logBattle(`–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–º–µ–Ω–µ–Ω - –∫–æ—Ä–∞–±–ª—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é`);
}



// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && previewState.isPreviewMode) {
        e.preventDefault();
        resetPreviewMode();
    }
});

function showPreviewIndicator() {
    let indicator = document.getElementById('previewIndicator');
    if (!indicator) {
        indicator = document.createElement('div');
        indicator.id = 'previewIndicator';
        indicator.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 165, 0, 0.9);
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            font-weight: bold;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        `;
        document.body.appendChild(indicator);
    }
    indicator.innerHTML = 'üîç –†–ï–ñ–ò–ú –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê - ESC –¥–ª—è –æ—Ç–º–µ–Ω—ã';
}

function hidePreviewIndicator() {
    const indicator = document.getElementById('previewIndicator');
    if (indicator) indicator.remove();
}


// –í battleUI.js –æ–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é updateShipVisuals:

function updateShipVisuals(ship) {
    console.log('Updating ship visuals for:', ship.id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    const wasSelected = document.querySelector(`.ship-icon[data-ship-id="${ship.id}"]`)?.classList.contains('selected-for-movement');

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–≤–æ—Ä–æ—Ç –∫–æ—Ä–∞–±–ª—è –Ω–∞ –∫–∞—Ä—Ç–µ
    renderPlacedShips(lastBattleState.ships, currentPlayerId);

    // –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setTimeout(() => {
        const shipIcon = document.querySelector(`.ship-icon[data-ship-id="${ship.id}"]`);
        if (!shipIcon) return;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        if (wasSelected) {
            shipIcon.classList.add('selected-for-movement');
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
        setupShipEventHandlers(shipIcon, ship);
    }, 50);
}

function setupShipEventHandlers(shipIcon, ship) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    const newIcon = shipIcon.cloneNode(true);
    shipIcon.parentNode.replaceChild(newIcon, shipIcon);
    shipIcon = newIcon;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    const cardContainerId = ship.owner === currentPlayerId ? 'playerShipCard' : 'enemyShipCard';

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HOVER –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    newIcon.addEventListener('mouseenter', () => {
        const container = document.getElementById(cardContainerId);
        if (container && !container.dataset.fixed) {
            container.innerHTML = '';
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª—è
            const currentShip = lastBattleState.ships.find(s => s.id === ship.id);
            if (currentShip) {
                container.appendChild(createShipCard(currentShip, false));
            }
        }
    });

    newIcon.addEventListener('mouseleave', () => {
        const container = document.getElementById(cardContainerId);
        if (container && !container.dataset.fixed) {
            container.innerHTML = '';
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
    if (ship.owner === currentPlayerId) {
        let clickTimer = null;
        let clickCount = 0;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
        newIcon.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            clickCount++;

            if (clickCount === 1) {
                clickTimer = setTimeout(() => {
                    handleSingleClick(ship, ship.id, lastBattleState, globalSocket);
                    clickCount = 0;
                }, 250);
            } else if (clickCount === 2) {
                clearTimeout(clickTimer);
                clickCount = 0;
                handleDoubleClick(ship, ship.id, lastBattleState, globalSocket);
            }
        });

        // –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
        newIcon.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            e.stopPropagation();
            const currentShip = lastBattleState.ships.find(s => s.id === ship.id);
            if (currentShip) {
                handleRightClick(currentShip, currentShip.id, lastBattleState, globalSocket);
            }
            return false;
        });

        newIcon.oncontextmenu = () => false;
    }
}

function calculateLocalPathCost(ship, targetPosition, allShips) {
    const distance = cubeDistance(ship.position, targetPosition);

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–µ–º –ª–∏ –¥–æ–π—Ç–∏
    if (distance > ship.currentSpeed) return null;

    // –†–∞—Å—á–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞
    let maneuverCost = 0;
    if (distance > 0) {
        const targetDirection = getDirectionToTarget(ship.position, targetPosition);
        const directionDiff = Math.abs(targetDirection - ship.dir);
        const actualDiff = Math.min(directionDiff, 6 - directionDiff);

        if (actualDiff > 0 && !ship.hasFreeTurn) {
            maneuverCost = actualDiff; // –£–ø—Ä–æ—â–µ–Ω–Ω–æ - 1 MP –∑–∞ –∫–∞–∂–¥—ã–µ 60¬∞
        }
    }

    return {
        speedCost: distance,
        maneuverCost: maneuverCost,
        finalDirection: distance > 0 ? getDirectionToTarget(ship.position, targetPosition) : ship.dir
    };
}

function handleSingleClick(ship, shipId, state, socket) {
    // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ä–∞–±–ª—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    if (previewState.isPreviewMode && previewState.shipId !== shipId) {
        resetPreviewMode();
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    clearMovementHighlight();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
    showMovementCells(ship, state.ships);

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
    document.querySelectorAll('.ship-icon.selected-for-movement').forEach(el => {
        el.classList.remove('selected-for-movement');
    });
    document.querySelector(`.ship-icon[data-ship-id="${shipId}"]`).classList.add('selected-for-movement');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ—Ä–∞–±–ª—è
    const container = document.getElementById('playerShipCard');
    if (container) {
        container.innerHTML = '';
        container.appendChild(createShipCard(ship, true));
        container.dataset.fixed = 'true';
        container.dataset.shipId = shipId;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞
    // –í –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ - —Å –æ—Å–æ–±—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    if (previewState.isPreviewMode && previewState.shipId === shipId) {
        if (ship.currentManeuverability > 0 || ship.hasFreeTurn) {
            addRotationControls(
                ship,
                true,
                false,
                (shipId, direction) => handlePreviewRotation(shipId, direction)
            );
            showRotationControlsForShip(shipId);
        }
    } else if (ship.status === 'activated' && (ship.currentManeuverability > 0 || ship.hasFreeTurn)) {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        addRotationControls(
            ship,
            true,
            false,
            (shipId, direction) => handleCombatRotation(socket, state.id, shipId, direction, ship)
        );
        showRotationControlsForShip(shipId);
    }

    logBattle(`–í—ã–±—Ä–∞–Ω –∫–æ—Ä–∞–±–ª—å: ${ship.shipClass}`);
}

function handleDoubleClick(ship, shipId, state, socket) {
    console.log('handleDoubleClick called:', {
        shipId: shipId,
        shipStatus: ship.status,
        shipClass: ship.shipClass,
        currentBattleRoomId: currentBattleRoomId,
        stateId: state.id
    });

    if (ship.status === 'ready') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º state.id –≤–º–µ—Å—Ç–æ currentBattleRoomId
        const roomId = state.id || currentBattleRoomId;

        console.log('Attempting to activate ship with roomId:', roomId);

        // –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∞–±–ª—å
        if (autoActivateShip(shipId, roomId, socket)) {
            logBattle(`–ê–∫—Ç–∏–≤–∞—Ü–∏—è ${ship.shipClass}...`);

            // –ï—Å–ª–∏ –º—ã –±—ã–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
            if (previewState.isPreviewMode && previewState.shipId === shipId) {
                setTimeout(() => {
                    commitPreviewMode();
                }, 100);
            }
        } else {
            logBattle(`–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É–±–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ${ship.shipClass}`);
        }
    } else {
        logBattle(`–ö–æ—Ä–∞–±–ª—å —É–∂–µ ${ship.status === 'activated' ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '—Å—Ö–æ–¥–∏–ª'}`);
    }
}

function handleRightClick(ship, shipId, state, socket) {
    console.log('Right click on ship:', shipId, 'Preview mode:', previewState.isPreviewMode);

    // –í —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
    if (previewState.isPreviewMode && previewState.shipId === shipId && ship.status === 'ready') {
        logBattle('–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ—Ä–∞–±–ª—è –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã...');

        // –°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ—Ä–∞–±–ª—å
        const roomId = state.id || currentBattleRoomId;
        if (autoActivateShip(shipId, roomId, socket)) {
            // –§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
            setTimeout(() => {
                commitPreviewMode();
                // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä–∫—É —Å—Ç—Ä–µ–ª—å–±—ã
                setTimeout(() => {
                    const updatedShip = lastBattleState.ships.find(s => s.id === shipId);
                    if (updatedShip && updatedShip.status === 'activated') {
                        testCombatSystem(updatedShip, lastBattleState.ships);
                    }
                }, 300);
            }, 100);
        } else {
            logBattle('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É–±–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
        }
    } else {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å—Ç—Ä–µ–ª—å–±—ã –¥–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
        console.log('Normal combat mode for ship:', ship);
        testCombatSystem(ship, state.ships || lastBattleState.ships);
    }
}

/** –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–æ—Ä–∞–±–ª—è –Ω–∞ –∫–∞—Ä—Ç–µ */
function highlightShipOnMap(shipId) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
    document.querySelectorAll('.ship-icon.highlighted').forEach(el => {
        el.classList.remove('highlighted');
    });

    // –ù–∞—Ö–æ–¥–∏–º –∏–∫–æ–Ω–∫—É –∫–æ—Ä–∞–±–ª—è –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
    const shipIcon = document.querySelector(`.ship-icon[data-ship-id="${shipId}"]`);
    if (shipIcon) {
        shipIcon.classList.add('highlighted');
    }
}

/** –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –∫–æ—Ä–∞–±–ª–µ–π */
async function loadShipProjects() {
    if (Object.keys(shipProjectsCache).length === 0) {
        try {
            const response = await fetch('/api/ships');
            const projects = await response.json();
            projects.forEach(project => {
                shipProjectsCache[project.id] = project;
            });
            console.log('Ship projects loaded:', shipProjectsCache);
        } catch (error) {
            console.error('Failed to load ship projects:', error);
        }
    }
    return shipProjectsCache;
}

/** –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID */
function getProjectName(projectId) {
    const project = shipProjectsCache[projectId];
    return project ? project.name : projectId;
}

/** –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ */
function getProjectInfo(projectId) {
    return shipProjectsCache[projectId] || null;
}

/** –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */
function calculateModifiedStats(shipClass, modules) {
    const baseStats = { ...classStats[shipClass] };

    modules.forEach(module => {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        if (module.effect.includes('+1 –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏')) {
            baseStats.speed += 1;
        } else if (module.effect.includes('-1 –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏')) {
            baseStats.speed -= 1;
        } else if (module.effect.includes('+1 –∫ –º–∞–Ω—ë–≤—Ä–µ–Ω–Ω–æ—Å—Ç–∏')) {
            baseStats.maneuverability += 1;
        } else if (module.effect.includes('-1 –∫ –º–∞–Ω—ë–≤—Ä–µ–Ω–Ω–æ—Å—Ç–∏')) {
            baseStats.maneuverability -= 1;
        } else if (module.effect.includes('+1 –∫ –±—Ä–æ–Ω–µ')) {
            baseStats.armor += 1;
        } else if (module.effect.includes('-1 –∫ –±—Ä–æ–Ω–µ')) {
            baseStats.armor -= 1;
        }
    });

    return baseStats;
}

/** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ—Ä–∞–±–ª—è */
function handleShipRotation(socket, roomId, shipId, direction) {
    console.log('Rotating ship:', shipId, direction);

    socket.emit('rotateShip', {
        roomId: roomId,
        shipId: shipId,
        direction: direction
    });

    logBattle(`–ö–æ—Ä–∞–±–ª—å –ø–æ–≤–µ—Ä–Ω—É—Ç ${direction === 'left' ? '–Ω–∞–ª–µ–≤–æ' : '–Ω–∞–ø—Ä–∞–≤–æ'}`);
}

/** –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–æ—Ä–∞–±–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ —Ñ–∞–∑–µ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ */
function setupShipClickHandlers(state, playerId) {
    console.log('Setting up ship click handlers for placement');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–æ—Ä–∞–±–ª–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–≤–æ—Ä–æ—Ç–∞
    // –í —Ñ–∞–∑–µ placement –≤—Å–µ —Å–≤–æ–∏ –∫–æ—Ä–∞–±–ª–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
    document.querySelectorAll('.ship-icon').forEach(shipIcon => {
        const shipId = shipIcon.dataset.shipId;
        const ship = state.ships.find(s => s.id === shipId);

        if (ship && ship.owner === playerId && state.phase === 'placement') {
            shipIcon.style.cursor = 'pointer';

            shipIcon.onclick = (e) => {
                e.stopPropagation();
                console.log('Ship clicked for rotation:', shipId);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
                showRotationControlsForShip(shipId);

                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
                document.querySelectorAll('.ship-icon.selected-for-rotation').forEach(el => {
                    el.classList.remove('selected-for-rotation');
                });
                shipIcon.classList.add('selected-for-rotation');

                logBattle(`–í—ã–±—Ä–∞–Ω –∫–æ—Ä–∞–±–ª—å –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞: ${ship.shipClass}`);
            };
        }
    });
}

/** –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–æ–≤ –¥–ª—è –±–æ–µ–≤–æ–π —Ñ–∞–∑—ã */
function setupBattleClickHandlers(state, socket, playerId) {
    console.log('Setting up battle click handlers');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–æ—Ä–∞–±–ª—è–º
    document.querySelectorAll('.ship-icon').forEach(shipIcon => {
        const shipId = shipIcon.dataset.shipId;
        const ship = state.ships.find(s => s.id === shipId);

        if (!ship) return;


        if (ship && ship.owner === playerId && state.currentPlayer === playerId) {
            shipIcon.style.cursor = 'pointer';

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            const newIcon = shipIcon.cloneNode(true);
            shipIcon.parentNode.replaceChild(newIcon, shipIcon);
            shipIcon = newIcon;

            let clickTimer = null;
            let clickCount = 0;

            // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
            shipIcon.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();

                clickCount++;
                console.log(`Click ${clickCount} on ship ${shipId}`);

                if (clickCount === 1) {
                    // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –∂–¥–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ
                    clickTimer = setTimeout(() => {
                        // –û–¥–∏–Ω–æ—á–Ω—ã–π –∫–ª–∏–∫
                        console.log('Processing single click');
                        handleSingleClick(ship, shipId, state, socket);
                        clickCount = 0;
                    }, 250); // 250–º—Å –Ω–∞ –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫

                } else if (clickCount === 2) {
                    // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫
                    clearTimeout(clickTimer);
                    clickCount = 0;
                    console.log('Processing double click');
                    handleDoubleClick(ship, shipId, state, socket);
                }
            });

            // –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º
            shipIcon.addEventListener('contextmenu', (e) => {
                e.preventDefault();
                console.log('Processing right click');
                handleRightClick(ship, shipId, state, socket);
            });

            console.log(`Click handlers set up for ship ${shipId}`);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –≥–µ–∫—Å–∞–º –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
    document.querySelectorAll('#hexmap polygon').forEach(poly => {
        poly.onclick = (e) => {
            const q = parseInt(poly.dataset.q);
            const r = parseInt(poly.dataset.r);
            const s = parseInt(poly.dataset.s);

            if (!isMovementCellAvailable(q, r, s)) return;

            const selectedShip = getSelectedShipForMovement();
            if (!selectedShip || state.currentPlayer !== playerId) return;

            // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–ª–∏–∫ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
            if (selectedShip.status === 'ready') {
                // –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
                if (!previewState.isPreviewMode) {
                    enterPreviewMode(selectedShip);
                }

                // –î–≤–∏–≥–∞–µ–º –∫–æ—Ä–∞–±–ª—å –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
                moveShipLocally(selectedShip, { q, r, s }, state.ships);

            } else if (selectedShip.status === 'activated') {
                // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å - –æ–±—ã—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                socket.emit('moveShip', {
                    roomId: state.id,
                    shipId: selectedShip.id,
                    targetPosition: { q, r, s }
                });
                logBattle(`–ö–æ—Ä–∞–±–ª—å –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ (${q},${r})`);
            }
        };
    });
}

/** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–µ–≤–æ–≥–æ UI */


export function initBattleUI(showView, socket, playerId) {
    globalSocket = socket; // –°–æ—Ö—Ä–∞–Ω—è–µ–º socket –≥–ª–æ–±–∞–ª—å–Ω–æ
    currentPlayerId = playerId;
    console.log('Initializing battle UI for player:', playerId);


    // –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ—Ä–∞–±–ª–µ–π –∏ –¥–≤–∏–∂–µ–Ω–∏—è
    addBattleStyles();

    initCombatSystem(socket, playerId);

    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
    socket.off('startGame');
    socket.off('updateGame');
    socket.off('battleState');
    socket.off('gameOver');
    socket.off('placementError');
    socket.off('turnError');
    socket.off('turnChanged');
    socket.off('movementError');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏
    socket.on('placementError', ({ message }) => {
        logBattle(`–û—à–∏–±–∫–∞: ${message}`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ö–æ–¥–∞
    socket.on('turnError', ({ message }) => {
        logBattle(`–û—à–∏–±–∫–∞ —Ö–æ–¥–∞: ${message}`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–≤–∏–∂–µ–Ω–∏—è
    socket.on('movementError', ({ message }) => {
        logBattle(`–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è: ${message}`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
    socket.on('turnChanged', ({ currentPlayer, currentPlayerNick, round }) => {
        logBattle(`–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ ${currentPlayerNick}. –†–∞—É–Ω–¥ ${round}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—à —Ö–æ–¥
        if (currentPlayer === currentPlayerId) {
            showTurnNotification('–í–∞—à —Ö–æ–¥!');
        }
    });

    socket.on('battleState', async state => {
        console.log('[battleState received]', state);

        lastBattleState = state;
        currentBattleRoomId = state.id;
        setCombatDependencies(state, playerId, autoActivateShip);

        setCombatRoomId(state.id)

        if (state.ships) {
            console.log('=== SHIPS MOVEMENT POINTS UPDATE ===');
            state.ships.forEach(ship => {
                console.log(`Ship ${ship.id} (${ship.shipClass}):`);
                console.log(`  Speed: ${ship.currentSpeed}/${ship.maxSpeed}`);
                console.log(`  Maneuverability: ${ship.currentManeuverability}/${ship.maxManeuverability}`);
                console.log(`  Position: (${ship.position.q}, ${ship.position.r}, ${ship.position.s})`);
                console.log(`  Direction: ${ship.dir}`);
            });
            console.log('=== END SHIPS UPDATE ===');
        }

        if (state.phase === 'placement') {
            // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–æ–º–Ω–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫
            if (!initialPlacement) {
                initialPlacement = JSON.parse(JSON.stringify(state.pendingPlacement));
                logBattle('–§–∞–∑–∞: –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π');
            }
            // –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏
            const newShips = state.ships.filter(s => !lastShips.some(ls => ls.id === s.id));
            newShips.forEach(s => {
                logBattle(`–ö–æ—Ä–∞–±–ª—å ${s.shipClass} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –≤ (${s.position.q},${s.position.r})`);
            });
            lastShips = state.ships.slice();

            await renderPlacement(state, showView, socket, playerId);
        }
        else if (state.phase === 'battle') {
            // —Å–±—Ä–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ placement
            if (initialPlacement) {
                initialPlacement = null;
                lastShips = [];
                logBattle(`–§–∞–∑–∞: –ë–æ–π –Ω–∞—á–∞–ª—Å—è! –†–∞—É–Ω–¥ ${state.round}`);
            }
            await renderBattle(state, showView, socket, playerId);
        }
    });

    socket.on('gameOver', (data) => {
        console.log('gameOver received:', data); // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û

        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø–æ–±–µ–¥–∞ –ø–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—é –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª–µ–π
        if (data.winners && data.losers) {
            logBattle(`üèÜ –ü–æ–±–µ–¥–∞ ${data.winners.join(', ')}!`);
            logBattle(`üíÄ ${data.losers.join(', ')} - –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã`);
        }
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–¥–∞—á–∞
        else if (data.loser) {
            logBattle(`–ò–≥—Ä–æ–∫ ${data.loser} —Å–¥–∞–ª—Å—è ‚Äî –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞`);
        }

        console.log('Returning to lobby...'); // –ò –≠–¢–û

        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–æ–±–±–∏
        setTimeout(() => {
            alert('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!');
            showView('lobby');
        }, 2000);
    });

    socket.on('shipActivated', ({ shipId, shipClass, playerNick, diceValue }) => {
        logBattle(`${playerNick} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª ${shipClass} –∫—É–±–∏–∫–æ–º ${diceValue}`);
    });

    socket.on('combatResults', (data) => {
        console.log('Combat results:', data);
        displayCombatResults(data);
    });

    socket.on('combatError', ({ message }) => {
        logBattle(`–û—à–∏–±–∫–∞ –±–æ—è: ${message}`);
    });

    socket.on('activationError', ({ message }) => {
        logBattle(`–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${message}`);
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –±–æ–µ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    setupBattleButtons(socket, playerId);
}

/** –†–µ–Ω–¥–µ—Ä —Ñ–∞–∑—ã —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ */
async function renderPlacement(state, showView, socket, playerId) {
    console.log('Rendering placement phase');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∫–æ—Ä–∞–±–ª–µ–π –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
    await loadShipProjects();

    showView('battle');

    // –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É –∏ –∏–∫–æ–Ω–∫–∏ —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π
    requestAnimationFrame(() => {
        drawHexGrid('placement', state.currentPlayer, playerId);
        renderPlacedShips(state.ships, playerId);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∞–±–ª–µ–π —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        state.ships.forEach(ship => {
            if (ship.owner === playerId) {
                addRotationControls(
                    ship,
                    true,
                    true,
                    (shipId, direction) => handleShipRotation(socket, state.id, shipId, direction)
                );
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –≥–µ–∫—Å—ã –∏ –∫–æ—Ä–∞–±–ª–∏
        setTimeout(() => {
            setupHexClickHandlers(state, socket, playerId);
            setupShipClickHandlers(state, playerId);
        }, 100);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ö–æ–¥–∞
    const turnElement = document.getElementById('turnPlayer');
    if (turnElement) {
        const isMyTurn = state.currentPlayer === playerId;
        turnElement.textContent = isMyTurn
            ? `–í–∞—à —Ö–æ–¥ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ - –†–∞—É–Ω–¥ ${state.round}`
            : `–•–æ–¥ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ - –†–∞—É–Ω–¥ ${state.round}`;
        turnElement.style.color = isMyTurn ? '#4CAF50' : '#F44336';
        turnElement.style.fontWeight = 'bold';
    }

    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ End Turn –≤ —Ñ–∞–∑–µ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏
    const endTurnBtn = document.getElementById('endTurnBtn');
    if (endTurnBtn) {
        const isMyTurn = state.currentPlayer === playerId;
        endTurnBtn.disabled = !isMyTurn;
        endTurnBtn.style.opacity = isMyTurn ? '1' : '0.5';
        endTurnBtn.textContent = 'End Turn';
    }

    // –†–∏—Å—É–µ–º —Å–ø–∏—Å–∫–∏ –∫–æ—Ä–∞–±–ª–µ–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    renderPlacementLists(state, playerId);
}

/** –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–æ–≤ –Ω–∞ –≥–µ–∫—Å—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è */
function setupHexClickHandlers(state, socket, playerId) {
    console.log('Setting up hex click handlers');

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.querySelectorAll('#hexmap polygon').forEach(poly => {
        poly.onclick = null;
    });

    // –í–µ—à–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω—ã –≥–µ–∫—Å–∞
    document.querySelectorAll('#hexmap polygon').forEach(poly => {
        poly.onclick = (event) => {
            console.log('Hex clicked!', poly.dataset);

            if (state.currentPlayer !== playerId) {
                logBattle('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥');
                return;
            }

            if (!selectedShipToPlace) {
                logBattle('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–∞–±–ª—å —Å–ª–µ–≤–∞');
                return;
            }

            const q = parseInt(poly.dataset.q);
            const r = parseInt(poly.dataset.r);
            const s = parseInt(poly.dataset.s);

            console.log('Placing ship:', {
                coords: { q, r, s },
                ship: selectedShipToPlace
            });

            socket.emit('placeShip', {
                roomId:    state.id,
                projectId: selectedShipToPlace.projectId,
                position:  { q, r, s }
            });

            // –°–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä
            document.querySelectorAll('.ship-card.selected')
                .forEach(c => c.classList.remove('selected'));
            selectedShipToPlace = null;

            logBattle(`–†–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª—å –≤ (${q},${r})`);
        };
    });
}

/** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ pending –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ */
function renderPlacementLists(state, playerId) {
    console.log('Rendering placement lists');

    const pending     = state.pendingPlacement;
    const myContainer = document.getElementById('player1Ships');
    const opContainer = document.getElementById('player2Ships');

    if (!myContainer || !opContainer) {
        console.error('Player ship containers not found');
        return;
    }

    myContainer.innerHTML = '';
    opContainer.innerHTML = '';

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
    Object.entries(pending).forEach(([pid, groups]) => {
        const parent = pid === playerId ? myContainer : opContainer;

        groups.forEach(group => {
            const { shipClass, projectId, count } = group;
            const projectName = getProjectName(projectId);
            const projectInfo = getProjectInfo(projectId);

            for (let i = 0; i < count; i++) {
                const card = document.createElement('div');
                card.className = 'ship-card';
                card.dataset.projectId = projectId;

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏–Ω–∞—á–µ fallback –Ω–∞ classStats
                let displayStats = projectInfo || classStats[shipClass];

                card.innerHTML = `
                    <h4>${projectName}</h4>
                    <p class="ship-class-badge">${shipClass}</p>
                    <p>–°–ø:${displayStats.speed}
                       –ú–Ω:${displayStats.maneuverability}
                       –ë—Ä:${displayStats.armor}
                       –ê–∫:${displayStats.activation}</p>
                `;

                // –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞—à–∏ –Ω–µ—Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ
                if (pid === playerId) {
                    card.classList.add('clickable');
                    card.onclick = () => {
                        console.log('Ship card clicked:', projectId);

                        // –ø–æ–¥—Å–≤–µ—Ç–∫–∞
                        document.querySelectorAll('.ship-card.selected')
                            .forEach(c => c.classList.remove('selected'));
                        card.classList.add('selected');
                        selectedShipToPlace = { projectId };

                        logBattle(`–í—ã–±—Ä–∞–Ω –∫–æ—Ä–∞–±–ª—å: ${projectName} (${shipClass})`);
                    };
                }

                parent.appendChild(card);
            }
        });
    });
}

/** –†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ–µ–≤–æ–π —Ñ–∞–∑—ã */
async function renderBattle(state, showView, socket, playerId) {
    console.log('Rendering battle phase');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∫–æ—Ä–∞–±–ª–µ–π –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
    await loadShipProjects();

    showView('battle');

    // –°–µ—Ç–∫–∞ –∏ –∏–∫–æ–Ω–∫–∏
    requestAnimationFrame(() => {
        drawHexGrid();
        renderPlacedShips(state.ships, playerId);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ–µ–≤–æ–π —Ñ–∞–∑—ã
        setTimeout(() => {
            setupBattleClickHandlers(state, socket, playerId);
        }, 100);
    });

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ö–æ–¥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
    const turnElement = document.getElementById('turnPlayer');
    if (turnElement) {
        const isMyTurn = state.currentPlayer === playerId;
        turnElement.textContent = isMyTurn
            ? `–í–∞—à —Ö–æ–¥ - –†–∞—É–Ω–¥ ${state.round}`
            : `–•–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ - –†–∞—É–Ω–¥ ${state.round}`;
        turnElement.style.color = isMyTurn ? '#4CAF50' : '#F44336';
        turnElement.style.fontWeight = 'bold';
    }

    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ End Turn
    const endTurnBtn = document.getElementById('endTurnBtn');
    if (endTurnBtn) {
        const isMyTurn = state.currentPlayer === playerId;
        endTurnBtn.disabled = !isMyTurn;
        endTurnBtn.style.opacity = isMyTurn ? '1' : '0.5';
        endTurnBtn.textContent = 'End Turn';
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ —É–∂–µ —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π
    const myShips = state.ships.filter(s => s.owner === playerId);
    const opShips = state.ships.filter(s => s.owner !== playerId);

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–ª—ã –∫—É–±–∏–∫–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const myDicePool = state.dicePools && state.dicePools[playerId]
        ? state.dicePools[playerId].current
        : generateDicePool(state.round, 0);

    const opponentId = Object.keys(state.dicePools || {}).find(id => id !== playerId);
    const opDicePool = state.dicePools && state.dicePools[opponentId]
        ? state.dicePools[opponentId].current
        : generateDicePool(state.round, 0);

    console.log('Dice pools:', { myDicePool, opDicePool, stateDicePools: state.dicePools });

    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    renderBattlePanel('player1Ships', myShips, myDicePool, '–≤–∞—à–∏');
    renderBattlePanel('player2Ships', opShips, opDicePool, '–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞');
}

/** –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –∫—É–±–∏–∫–∞–º–∏ –∏ —Ñ–ª–æ—Ç–æ–º */
function renderBattlePanel(containerId, ships, dicePool, playerName) {
    const container = document.getElementById(containerId);
    if (!container) return;

    console.log(`Rendering battle panel for ${playerName}:`, {
        shipsCount: ships.length,
        ships: ships.map(s => ({
            id: s.id,
            class: s.shipClass,
            currentSpeed: s.currentSpeed,
            currentManeuverability: s.currentManeuverability,
            hp: s.hp
        }))
    });

    container.innerHTML = '';
    //container.offsetHeight; //–¢–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ —è–≤–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ

    console.log(`Rendering battle panel for ${playerName}:`, {
        shipsCount: ships.length,
        ships: ships.map(s => ({
            id: s.id,
            class: s.shipClass,
            currentSpeed: s.currentSpeed,
            currentManeuverability: s.currentManeuverability
        }))
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∫—É–±–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (–±–æ–µ–≤–∞—è —Ñ–∞–∑–∞)
    if (dicePool) {
        renderDicePool(container, dicePool, playerName);
    }

    // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–æ—Ç
    //renderFleetList(container, ships);
    const cardContainer = document.createElement('div');
    cardContainer.id = playerName === '–≤–∞—à–∏' ? 'playerShipCard' : 'enemyShipCard';
    cardContainer.className = 'ship-hover-card-container';
    container.appendChild(cardContainer);
}

/** –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ –∫—É–±–∏–∫–æ–≤ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–ø—Ä—è–º—É—é */
function renderDicePool(container, dicePool, playerName) {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∫—É–±–∏–∫–æ–≤
    const dicePanel = document.createElement('div');
    dicePanel.className = 'dice-panel';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const header = document.createElement('div');
    header.className = 'dice-panel-header';
    header.innerHTML = `<h4>–ö—É–±–∏–∫–∏ ${playerName}</h4>`;

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫—É–±–∏–∫–æ–≤
    const diceContainer = document.createElement('div');
    diceContainer.className = 'dice-container';

    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É–±–∏–∫–æ–≤
    const totalDice = Object.values(dicePool).reduce((sum, count) => sum + count, 0);

    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–∞
    for (let value = 1; value <= 6; value++) {
        const count = dicePool[value] || 0;

        const diceSlot = document.createElement('div');
        diceSlot.className = `dice-slot ${count > 0 ? 'has-dice' : 'empty'}`;
        diceSlot.dataset.value = value;

        if (count > 0 && container.id === 'player1Ships') {
            diceSlot.style.cursor = 'pointer';
            diceSlot.onclick = () => handleDiceClick(value);
        }

        // –û—Å–æ–±–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è –µ–¥–∏–Ω–∏—Ü (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É–±—ã)
        if (value === 1 && count > 0) {
            diceSlot.classList.add('special-dice');
        }

        diceSlot.innerHTML = `
            <div class="dice-face">
                <span class="dice-value">${value}</span>
                ${count > 0 ? `<span class="dice-count">${count}</span>` : ''}
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        const tooltip = value === 1
            ? '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É–±—ã (—Ç–æ—Ä–ø–µ–¥—ã, —Å–ø–µ—Ü–¥–µ–π—Å—Ç–≤–∏—è)'
            : `–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ—Ä–∞–±–ª–µ–π ${value}+`;
        diceSlot.title = tooltip;

        diceContainer.appendChild(diceSlot);
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–ª–µ
    const poolInfo = document.createElement('div');
    poolInfo.className = 'dice-pool-info';
    poolInfo.innerHTML = `
        <small>–í—Å–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π: ${totalDice}</small>
        ${dicePool[1] > 0 ? `<small class="special-note">–°–ø–µ—Ü. –∑–Ω–∞—á–µ–Ω–∏—è: ${dicePool[1]}</small>` : ''}
    `;

    dicePanel.appendChild(header);
    dicePanel.appendChild(diceContainer);
    dicePanel.appendChild(poolInfo);

    container.appendChild(dicePanel);
}

let selectedDiceValue = null;

function handleDiceClick(diceValue) {
    console.log('Dice clicked:', diceValue);

    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    document.querySelectorAll('.dice-slot.selected').forEach(slot => {
        slot.classList.remove('selected');
    });

    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫
    const clickedSlot = document.querySelector(`.dice-slot[data-value="${diceValue}"]`);
    if (clickedSlot) {
        clickedSlot.classList.add('selected');
    }

    selectedDiceValue = diceValue;

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–æ—Ä–∞–±–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏–º –∫—É–±–∏–∫–æ–º
    highlightActivatableShips(diceValue);

    logBattle(`–í—ã–±—Ä–∞–Ω –∫—É–±–∏–∫: ${diceValue}`);
}

function highlightActivatableShips(diceValue) {
    document.querySelectorAll('.battle-ship-card').forEach(card => {
        card.classList.remove('can-activate');
    });

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–∞–±–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
    const ships = lastBattleState.ships.filter(ship =>
        ship.owner === currentPlayerId &&  // <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        ship.status === 'ready' &&
        ship.hp > 0
    );

    ships.forEach(ship => {
        const activationValue = classStats[ship.shipClass].activation;
        if (diceValue >= activationValue) {
            const card = document.querySelector(`.battle-ship-card[data-ship-id="${ship.id}"]`);
            if (card) {
                card.classList.add('can-activate');
            }
        }
    });
}

function autoActivateShip(shipId, roomId, socket) {
    console.log('autoActivateShip called:', { shipId, roomId });

    const ship = lastBattleState.ships.find(s => s.id === shipId);
    if (!ship || ship.status !== 'ready') {
        console.log('Ship not found or not ready');
        return false;
    }

    const playerDice = lastBattleState.dicePools[currentPlayerId];
    if (!playerDice) {
        console.log('No dice pool for player');
        return false;
    }

    const activationValue = classStats[ship.shipClass].activation;
    console.log(`Ship ${ship.shipClass} needs ${activationValue}+`);
    console.log('Available dice:', playerDice.current);

    // –ò—â–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É–±
    for (let value = activationValue; value <= 6; value++) {
        if (playerDice.current[value] && playerDice.current[value] > 0) {
            console.log(`Found suitable dice: ${value}`);
            socket.emit('activateShip', {
                roomId: roomId,
                shipId: shipId,
                diceValue: value
            });
            return true;
        }
    }

    console.log('No suitable dice found');
    logBattle(`–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É–±–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ${ship.shipClass} (–Ω—É–∂–µ–Ω ${activationValue}+)`);
    return false;
}

function handleCombatRotation(socket, roomId, shipId, direction, ship) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
    if (ship.hasFreeTurn) {
        console.log('Using free turn for rotation');
        logBattle(`–ü–æ–≤–æ—Ä–æ—Ç ${direction === 'left' ? '–Ω–∞–ª–µ–≤–æ' : '–Ω–∞–ø—Ä–∞–≤–æ'} (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è)`);
    } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ—á–∫–æ–≤ –º–∞–Ω–µ–≤—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if (ship.currentManeuverability <= 0) {
            logBattle('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –º–∞–Ω–µ–≤—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞');
            return;
        }
        logBattle(`–ü–æ–≤–æ—Ä–æ—Ç ${direction === 'left' ? '–Ω–∞–ª–µ–≤–æ' : '–Ω–∞–ø—Ä–∞–≤–æ'} (‚àí1 –º–∞–Ω—ë–≤—Ä–µ–Ω–Ω–æ—Å—Ç—å)`);
    }

    console.log('Combat rotation:', { shipId, direction, hasFreeTurn: ship.hasFreeTurn });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    socket.emit('combatRotateShip', {
        roomId: roomId,
        shipId: shipId,
        direction: direction
    });
}

/** –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π –≤ –±–æ—é */
function renderFleetList(container, ships, battleState, socket) {
    if (ships.length === 0) {
        const noShips = document.createElement('div');
        noShips.className = 'no-ships';
        noShips.textContent = '–ù–µ—Ç –∫–æ—Ä–∞–±–ª–µ–π';
        container.appendChild(noShips);
        return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç—É, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–ª–∞—Å—Å—É
    const groups = ships.reduce((acc, ship) => {
        const key = `${ship.shipClass}_${ship.projectId}`;
        if (!acc[key]) {
            acc[key] = {
                shipClass: ship.shipClass,
                projectId: ship.projectId,
                ships: []
            };
        }
        acc[key].ships.push(ship);
        return acc;
    }, {});

    Object.entries(groups).forEach(([key, group]) => {
        const { shipClass, projectId, ships } = group;

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã
        const groupContainer = document.createElement('div');
        groupContainer.className = 'ship-class-group';

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        const projectName = getProjectName(projectId);
        const projectInfo = getProjectInfo(projectId);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
        const header = document.createElement('div');
        header.className = 'ship-group-header';
        header.innerHTML = `
            <span class="toggle-icon">‚ñº</span>
            <strong>${shipClass}</strong>
            <span class="project-name">"${projectName}"</span>
            <span class="ship-count">√ó${ships.length}</span>
        `;

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ—Ä–∞–±–ª–µ–π
        const shipsContainer = document.createElement('div');
        shipsContainer.className = 'ships-container visible';

        ships.forEach((ship, index) => {
            const shipCard = document.createElement('div');
            shipCard.className = 'battle-ship-card';
            shipCard.dataset.shipId = ship.id;

            // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ fallback –Ω–∞ classStats
            let displayStats = projectInfo || classStats[ship.shipClass];

            // –ï—Å–ª–∏ —É –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å—Ç—å –º–æ–¥—É–ª–∏, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if (projectInfo && projectInfo.modules && projectInfo.modules.length > 0) {
                displayStats = calculateModifiedStats(ship.shipClass, projectInfo.modules);
            }

            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç maxHP —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –∫–ª–∞—Å—Å–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
            const maxHP = displayStats.activation;
            const hpPercent = (ship.hp / maxHP) * 100;
            const hpColor = hpPercent > 60 ? '#4CAF50' : hpPercent > 30 ? '#FF9800' : '#F44336';

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –æ—á–∫–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è
            const speedPercent = (ship.currentSpeed / ship.maxSpeed) * 100;
            const maneuverPercent = (ship.currentManeuverability / ship.maxManeuverability) * 100;

            const speedColor = speedPercent > 60 ? '#2196F3' : speedPercent > 30 ? '#FF9800' : '#F44336';
            const maneuverColor = maneuverPercent > 60 ? '#9C27B0' : maneuverPercent > 30 ? '#FF9800' : '#F44336';
            const currentArmor = displayStats.armor - (ship.armorPenalty || 0);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∞–±–ª—è
            const shipStatus = ship.status || (ship.hp > 0 ? 'ready' : 'destroyed');
            const statusText = {
                'ready': '–ì–æ—Ç–æ–≤',
                'activated': '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                'spent': '–°—Ö–æ–¥–∏–ª',
                'destroyed': '–£–Ω–∏—á—Ç–æ–∂–µ–Ω'
            };
            const statusClass = {
                'ready': 'ready',
                'activated': 'active',
                'spent': 'spent',
                'destroyed': 'destroyed'
            };

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
            const isClickable = ship.owner === currentPlayerId &&
                lastBattleState && lastBattleState.currentPlayer === currentPlayerId &&
                shipStatus === 'ready';

            if (isClickable) {
                shipCard.classList.add('clickable');
            }

            shipCard.innerHTML = `
                <div class="ship-card-header">
                    <span class="ship-name">${projectName} #${index + 1}</span>
                    <span class="ship-class-badge">${shipClass}</span>
                    <span class="ship-status ${statusClass[shipStatus]}">${statusText[shipStatus]}</span>
                </div>
                <div class="ship-stats">
                    <div class="hp-bar">
                        <div class="hp-fill" style="width: ${hpPercent}%; background-color: ${hpColor}"></div>
                        <span class="hp-text">${ship.hp}/${maxHP} HP</span>
                    </div>
                    <div class="movement-bars">
                        <div class="speed-bar">
                            <div class="speed-fill" style="width: ${speedPercent}%; background-color: ${speedColor}"></div>
                            <span class="speed-text">${ship.currentSpeed}/${ship.maxSpeed} –°–∫–æ—Ä–æ—Å—Ç—å</span>
                        </div>
                        <div class="maneuver-bar">
                            <div class="maneuver-fill" style="width: ${maneuverPercent}%; background-color: ${maneuverColor}"></div>
                            <span class="maneuver-text">${ship.currentManeuverability}/${ship.maxManeuverability} –ú–∞–Ω—ë–≤—Ä</span>
                        </div>
                    </div>
                    <div class="ship-details">
                        <span>–ü–æ–∑: (${ship.position.q}, ${ship.position.r})</span>
                        <span>–ë—Ä:${displayStats.armor}${ship.armorPenalty ? ` (-${ship.armorPenalty})` : ''}</span>
                    </div>
                    ${projectInfo && projectInfo.modules && projectInfo.modules.length > 0 ?
                `<div class="ship-modules">
                            <small>–ú–æ–¥—É–ª–∏: ${projectInfo.modules.map(m => m.name).join(', ')}</small>
                        </div>` : ''
            }
                </div>
            `;

            // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–æ—Ä–∞–±–ª—è - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
            if (isClickable) {
                shipCard.onclick = () => {
                    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫—É–±–∏–∫ –∏ –∫–æ—Ä–∞–±–ª—å ready - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                    if (selectedDiceValue && shipStatus === 'ready') {
                        const activationValue = displayStats.activation;

                        if (selectedDiceValue >= activationValue) {
                            globalSocket.emit('activateShip', {
                                roomId: currentBattleRoomId,
                                shipId: ship.id,
                                diceValue: selectedDiceValue
                            });

                            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫—É–±–∏–∫–∞
                            selectedDiceValue = null;
                            document.querySelectorAll('.dice-slot.selected').forEach(slot => {
                                slot.classList.remove('selected');
                            });

                            logBattle(`–ê–∫—Ç–∏–≤–∏—Ä—É—é ${projectName} –∫—É–±–∏–∫–æ–º ${selectedDiceValue}`);
                        } else {
                            logBattle(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ${shipClass}`);
                        }
                    } else {
                        // –û–±—ã—á–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è
                        document.querySelectorAll('.battle-ship-card.selected')
                            .forEach(c => c.classList.remove('selected'));
                        shipCard.classList.add('selected');
                        highlightShipOnMap(ship.id);
                        logBattle(`–í—ã–±—Ä–∞–Ω ${projectName} #${index + 1}`);
                    }
                };
            }

            shipsContainer.appendChild(shipCard);
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã
        header.addEventListener('click', () => {
            const isVisible = shipsContainer.classList.toggle('visible');
            header.querySelector('.toggle-icon').textContent = isVisible ? '‚ñº' : '‚ñ∂';
        });

        groupContainer.appendChild(header);
        groupContainer.appendChild(shipsContainer);
        container.appendChild(groupContainer);
    });
}

function setupBattleButtons(socket, playerId) {
    console.log('Setting up battle buttons for player:', playerId);

    // –ö–Ω–æ–ø–∫–∞ End Turn
    const endTurnBtn = document.getElementById('endTurnBtn');
    console.log('End Turn button found:', endTurnBtn);

    if (endTurnBtn) {
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        endTurnBtn.onclick = null;

        endTurnBtn.onclick = () => {
            console.log('End Turn button clicked!');

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤–º–µ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∞
            const roomId = currentBattleRoomId;
            console.log('Current room ID:', roomId);

            if (!roomId) {
                console.error('No room ID found');
                logBattle('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞');
                return;
            }

            console.log('Sending endTurn event with roomId:', roomId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ö–æ–¥–∞
            socket.emit('endTurn', { roomId });
            logBattle('–•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω - —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        };

        console.log('End Turn button handler attached');
    } else {
        console.error('End Turn button not found in DOM');
    }

    // –ö–Ω–æ–ø–∫–∞ Surrender
    const surrenderBtn = document.getElementById('surrenderBtn');
    if (surrenderBtn) {
        surrenderBtn.onclick = () => {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å—Å—è?')) {
                console.log('Surrender button clicked');
                socket.emit('surrender');
                logBattle('–í—ã —Å–¥–∞–ª–∏—Å—å');
            }
        };
        console.log('Surrender button handler attached');
    }
}

function showTurnNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'turn-notification';
    notification.textContent = message;
    document.body.appendChild(notification);

    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

function generateDicePool(round, previousOnes = 0) {
    const pool = { 1: previousOnes, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0 };

    // –ë—Ä–æ—Å–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ —Ä–∞–≤–Ω–æ–µ –Ω–æ–º–µ—Ä—É —Ä–∞—É–Ω–¥–∞
    for (let i = 0; i < round; i++) {
        const roll = Math.floor(Math.random() * 6) + 1;
        pool[roll]++;
    }

    return pool;
}

function createShipCard(ship, isDetailed = false) {
    const projectInfo = getProjectInfo(ship.projectId);
    const projectName = getProjectName(ship.projectId);
    const stats = projectInfo || classStats[ship.shipClass];

    const maxHP = stats.activation;
    const hpPercent = (ship.hp / maxHP) * 100;
    const speedPercent = (ship.currentSpeed / ship.maxSpeed) * 100;
    const maneuverPercent = (ship.currentManeuverability / ship.maxManeuverability) * 100;

    const card = document.createElement('div');
    card.className = 'ship-hover-card';
    card.innerHTML = `
        <div class="ship-card-header">
            <span class="ship-name">${projectName}</span>
            <span class="ship-class-badge">${ship.shipClass}</span>
        </div>
        <div class="ship-stats">
            <div class="hp-bar">
                <div class="hp-fill" style="width: ${hpPercent}%; background-color: ${hpPercent > 60 ? '#4CAF50' : hpPercent > 30 ? '#FF9800' : '#F44336'}"></div>
                <span class="hp-text">${ship.hp}/${maxHP} HP</span>
            </div>
            <div class="movement-bars">
                <div class="speed-bar">
                    <div class="speed-fill" style="width: ${speedPercent}%; background-color: ${speedPercent > 60 ? '#2196F3' : '#F44336'}"></div>
                    <span class="speed-text">${ship.currentSpeed}/${ship.maxSpeed} –°–∫–æ—Ä–æ—Å—Ç—å</span>
                </div>
                <div class="maneuver-bar">
                    <div class="maneuver-fill" style="width: ${maneuverPercent}%; background-color: ${maneuverPercent > 60 ? '#9C27B0' : '#F44336'}"></div>
                    <span class="maneuver-text">${ship.currentManeuverability}/${ship.maxManeuverability} –ú–∞–Ω—ë–≤—Ä</span>
                </div>
            </div>
            ${ship.hasFreeTurn ? '<div class="free-turn-indicator">üîÑ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω</div>' : ''}
            ${isDetailed ? `
                <div class="ship-details">
                    <span>–ü–æ–∑–∏—Ü–∏—è: (${ship.position.q}, ${ship.position.r})</span>
                    <span>–ë—Ä–æ–Ω—è: ${stats.armor}</span>
                    <span>–ê–∫—Ç–∏–≤–∞—Ü–∏—è: ${stats.activation}+</span>
                </div>
            ` : ''}
        </div>
    `;

    return card;
}

/** –î–æ–±–∞–≤–ª—è–µ—Ç CSS —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ—Ä–∞–±–ª–µ–π –∏ –¥–≤–∏–∂–µ–Ω–∏—è */
function addBattleStyles() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —Å—Ç–∏–ª–∏
    if (document.getElementById('battle-styles')) {
        return;
    }

    const battleStyles = `
    .ship-icon.selected-for-rotation {
        filter: drop-shadow(0 0 8px #FFD700) !important;
    }
    
    .ship-icon.selected-for-movement {
        filter: drop-shadow(0 0 8px #00FF00) !important;
    }

    .rotation-button:hover circle {
        fill: #1976D2 !important;
        stroke-width: 3;
    }

    .rotation-button:hover text {
        font-size: 16px !important;
    }

    .rotation-button {
        transition: all 0.2s ease;
        cursor: pointer;
    }
    
    .rotation-button circle {
        transition: all 0.2s ease;
    }
    
    .rotation-button text {
        transition: all 0.2s ease;
        pointer-events: none;
    }
    
    .rotation-button:active circle {
        fill: #0D47A1 !important;
    }
    
    #hexmap polygon.movement-available {
        fill: rgba(52,211,153,0.3) !important;
        stroke: #34d399 !important;
        stroke-width: 2 !important;
        cursor: pointer !important;
    }
    
    #hexmap polygon.movement-available:hover {
        fill: rgba(52,211,153,0.5) !important;
    }
    
    .dice-slot.selected {
    border-color: #FFD700 !important;
    box-shadow: 0 0 10px #FFD700 !important;
    }

    .battle-ship-card.can-activate {
    border: 2px solid #4CAF50;
    box-shadow: 0 0 10px rgba(76, 175, 80, 0.3);
    }
    
    .ship-icon {
        cursor: pointer;
    }
    
    .ship-icon:hover {
        filter: brightness(1.1);
    }
    
    .free-turn-indicator {
    background: #4CAF50;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    margin-top: 4px;
    font-size: 0.8em;
    text-align: center;
    font-weight: bold;
    }
    `;

    // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç style
    const styleSheet = document.createElement('style');
    styleSheet.id = 'battle-styles';
    styleSheet.textContent = battleStyles;
    document.head.appendChild(styleSheet);

    console.log('Battle styles added');
}

function displayCombatResults(data) {
    const { results } = data;

    results.forEach(result => {
        if (result.error) {
            logBattle(`${result.weaponId}: ${result.error}`);
            return;
        }

        result.steps.forEach(step => {
            logBattle(step.message);
        });

        if (result.additionalEffects) {
            result.additionalEffects.forEach(effect => {
                logBattle(`‚ö° ${effect}`);
            });
        }
    });
}